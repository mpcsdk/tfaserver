// This code was autogenerated from risk/v1/risk.proto, do not edit.
package v1

import (
	"context"
	"log"
	"time"

	"google.golang.org/protobuf/proto"
	"github.com/nats-io/nats.go"
	github_com_golang_protobuf_ptypes_empty "github.com/golang/protobuf/ptypes/empty"
	"github.com/nats-rpc/nrpc"
)

// RiskServer is the interface that providers of the service
// Risk should implement.
type RiskServer interface {
	RpcAlive(ctx context.Context, req *github_com_golang_protobuf_ptypes_empty.Empty) (*github_com_golang_protobuf_ptypes_empty.Empty, error)
	RpcRiskTxs(ctx context.Context, req *TxRiskReq) (*TxRiskRes, error)
	RpcRiskTFA(ctx context.Context, req *TFARiskReq) (*TFARiskRes, error)
	RpcAllAbi(ctx context.Context, req *AllAbiReq) (*AllAbiRes, error)
	RpcAllNftRules(ctx context.Context, req *NftRulesReq) (*NftRulesRes, error)
	RpcAllFtRules(ctx context.Context, req *FtRulesReq) (*FtRulesRes, error)
}

// RiskHandler provides a NATS subscription handler that can serve a
// subscription using a given RiskServer implementation.
type RiskHandler struct {
	ctx     context.Context
	workers *nrpc.WorkerPool
	nc      nrpc.NatsConn
	server  RiskServer

	encodings []string
}

func NewRiskHandler(ctx context.Context, nc nrpc.NatsConn, s RiskServer) *RiskHandler {
	return &RiskHandler{
		ctx:    ctx,
		nc:     nc,
		server: s,

		encodings: []string{"protobuf"},
	}
}

func NewRiskConcurrentHandler(workers *nrpc.WorkerPool, nc nrpc.NatsConn, s RiskServer) *RiskHandler {
	return &RiskHandler{
		workers: workers,
		nc:      nc,
		server:  s,
	}
}

// SetEncodings sets the output encodings when using a '*Publish' function
func (h *RiskHandler) SetEncodings(encodings []string) {
	h.encodings = encodings
}

func (h *RiskHandler) Subject() string {
	return "Risk.>"
}

func (h *RiskHandler) Handler(msg *nats.Msg) {
	var ctx context.Context
	if h.workers != nil {
		ctx = h.workers.Context
	} else {
		ctx = h.ctx
	}
	request := nrpc.NewRequest(ctx, h.nc, msg.Subject, msg.Reply)
	// extract method name & encoding from subject
	_, _, name, tail, err := nrpc.ParseSubject(
		"", 0, "Risk", 0, msg.Subject)
	if err != nil {
		log.Printf("RiskHanlder: Risk subject parsing failed: %v", err)
		return
	}

	request.MethodName = name
	request.SubjectTail = tail

	// call handler and form response
	var immediateError *nrpc.Error
	switch name {
	case "RpcAlive":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RpcAliveHanlder: RpcAlive subject parsing failed: %v", err)
			break
		}
		var req github_com_golang_protobuf_ptypes_empty.Empty
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RpcAliveHandler: RpcAlive request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RpcAlive(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "RpcRiskTxs":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RpcRiskTxsHanlder: RpcRiskTxs subject parsing failed: %v", err)
			break
		}
		var req TxRiskReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RpcRiskTxsHandler: RpcRiskTxs request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RpcRiskTxs(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "RpcRiskTFA":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RpcRiskTFAHanlder: RpcRiskTFA subject parsing failed: %v", err)
			break
		}
		var req TFARiskReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RpcRiskTFAHandler: RpcRiskTFA request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RpcRiskTFA(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "RpcAllAbi":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RpcAllAbiHanlder: RpcAllAbi subject parsing failed: %v", err)
			break
		}
		var req AllAbiReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RpcAllAbiHandler: RpcAllAbi request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RpcAllAbi(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "RpcAllNftRules":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RpcAllNftRulesHanlder: RpcAllNftRules subject parsing failed: %v", err)
			break
		}
		var req NftRulesReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RpcAllNftRulesHandler: RpcAllNftRules request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RpcAllNftRules(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "RpcAllFtRules":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RpcAllFtRulesHanlder: RpcAllFtRules subject parsing failed: %v", err)
			break
		}
		var req FtRulesReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RpcAllFtRulesHandler: RpcAllFtRules request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RpcAllFtRules(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	default:
		log.Printf("RiskHandler: unknown name %q", name)
		immediateError = &nrpc.Error{
			Type: nrpc.Error_CLIENT,
			Message: "unknown name: " + name,
		}
	}
	if immediateError == nil {
		if h.workers != nil {
			// Try queuing the request
			if err := h.workers.QueueRequest(request); err != nil {
				log.Printf("nrpc: Error queuing the request: %s", err)
			}
		} else {
			// Run the handler synchronously
			request.RunAndReply()
		}
	}

	if immediateError != nil {
		if err := request.SendReply(nil, immediateError); err != nil {
			log.Printf("RiskHandler: Risk handler failed to publish the response: %s", err)
		}
	} else {
	}
}

type RiskClient struct {
	nc      nrpc.NatsConn
	Subject string
	Encoding string
	Timeout time.Duration
}

func NewRiskClient(nc nrpc.NatsConn) *RiskClient {
	return &RiskClient{
		nc:      nc,
		Subject: "Risk",
		Encoding: "protobuf",
		Timeout: 5 * time.Second,
	}
}

func (c *RiskClient) RpcAlive(req *github_com_golang_protobuf_ptypes_empty.Empty) (*github_com_golang_protobuf_ptypes_empty.Empty, error) {

	subject := c.Subject + "." + "RpcAlive"

	// call
	var resp = github_com_golang_protobuf_ptypes_empty.Empty{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *RiskClient) RpcRiskTxs(req *TxRiskReq) (*TxRiskRes, error) {

	subject := c.Subject + "." + "RpcRiskTxs"

	// call
	var resp = TxRiskRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *RiskClient) RpcRiskTFA(req *TFARiskReq) (*TFARiskRes, error) {

	subject := c.Subject + "." + "RpcRiskTFA"

	// call
	var resp = TFARiskRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *RiskClient) RpcAllAbi(req *AllAbiReq) (*AllAbiRes, error) {

	subject := c.Subject + "." + "RpcAllAbi"

	// call
	var resp = AllAbiRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *RiskClient) RpcAllNftRules(req *NftRulesReq) (*NftRulesRes, error) {

	subject := c.Subject + "." + "RpcAllNftRules"

	// call
	var resp = NftRulesRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *RiskClient) RpcAllFtRules(req *FtRulesReq) (*FtRulesRes, error) {

	subject := c.Subject + "." + "RpcAllFtRules"

	// call
	var resp = FtRulesRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

type Client struct {
	nc      nrpc.NatsConn
	defaultEncoding string
	defaultTimeout time.Duration
	Risk *RiskClient
}

func NewClient(nc nrpc.NatsConn) *Client {
	c := Client{
		nc: nc,
		defaultEncoding: "protobuf",
		defaultTimeout: 5*time.Second,
	}
	c.Risk = NewRiskClient(nc)
	return &c
}

func (c *Client) SetEncoding(encoding string) {
	c.defaultEncoding = encoding
	if c.Risk != nil {
		c.Risk.Encoding = encoding
	}
}

func (c *Client) SetTimeout(t time.Duration) {
	c.defaultTimeout = t
	if c.Risk != nil {
		c.Risk.Timeout = t
	}
}