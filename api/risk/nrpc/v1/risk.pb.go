// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: risk/v1/risk.proto

package v1

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/nats-rpc/nrpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// /
type FtRulesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FtRulesReq) Reset() {
	*x = FtRulesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risk_v1_risk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtRulesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtRulesReq) ProtoMessage() {}

func (x *FtRulesReq) ProtoReflect() protoreflect.Message {
	mi := &file_risk_v1_risk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtRulesReq.ProtoReflect.Descriptor instead.
func (*FtRulesReq) Descriptor() ([]byte, []int) {
	return file_risk_v1_risk_proto_rawDescGZIP(), []int{0}
}

type Ftrules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contract             string   `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MethodName           string   `protobuf:"bytes,3,opt,name=methodName,proto3" json:"methodName,omitempty"`
	MethodSig            string   `protobuf:"bytes,4,opt,name=methodSig,proto3" json:"methodSig,omitempty"`
	MethodFromField      string   `protobuf:"bytes,5,opt,name=methodFromField,proto3" json:"methodFromField,omitempty"`
	MethodToField        string   `protobuf:"bytes,6,opt,name=methodToField,proto3" json:"methodToField,omitempty"`
	MethodValueField     string   `protobuf:"bytes,7,opt,name=methodValueField,proto3" json:"methodValueField,omitempty"`
	EventName            string   `protobuf:"bytes,8,opt,name=eventName,proto3" json:"eventName,omitempty"`
	EventSig             string   `protobuf:"bytes,9,opt,name=eventSig,proto3" json:"eventSig,omitempty"`
	EventTopic           string   `protobuf:"bytes,10,opt,name=eventTopic,proto3" json:"eventTopic,omitempty"`
	EventFromField       string   `protobuf:"bytes,11,opt,name=eventFromField,proto3" json:"eventFromField,omitempty"`
	EventToField         string   `protobuf:"bytes,12,opt,name=eventToField,proto3" json:"eventToField,omitempty"`
	EventValueField      string   `protobuf:"bytes,13,opt,name=eventValueField,proto3" json:"eventValueField,omitempty"`
	SkipToAddr           []string `protobuf:"bytes,14,rep,name=skipToAddr,proto3" json:"skipToAddr,omitempty"`
	ThresholdBigintBytes []byte   `protobuf:"bytes,15,opt,name=threshold_bigint_bytes,json=thresholdBigintBytes,proto3" json:"threshold_bigint_bytes,omitempty"`
}

func (x *Ftrules) Reset() {
	*x = Ftrules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risk_v1_risk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ftrules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ftrules) ProtoMessage() {}

func (x *Ftrules) ProtoReflect() protoreflect.Message {
	mi := &file_risk_v1_risk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ftrules.ProtoReflect.Descriptor instead.
func (*Ftrules) Descriptor() ([]byte, []int) {
	return file_risk_v1_risk_proto_rawDescGZIP(), []int{1}
}

func (x *Ftrules) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *Ftrules) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ftrules) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *Ftrules) GetMethodSig() string {
	if x != nil {
		return x.MethodSig
	}
	return ""
}

func (x *Ftrules) GetMethodFromField() string {
	if x != nil {
		return x.MethodFromField
	}
	return ""
}

func (x *Ftrules) GetMethodToField() string {
	if x != nil {
		return x.MethodToField
	}
	return ""
}

func (x *Ftrules) GetMethodValueField() string {
	if x != nil {
		return x.MethodValueField
	}
	return ""
}

func (x *Ftrules) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *Ftrules) GetEventSig() string {
	if x != nil {
		return x.EventSig
	}
	return ""
}

func (x *Ftrules) GetEventTopic() string {
	if x != nil {
		return x.EventTopic
	}
	return ""
}

func (x *Ftrules) GetEventFromField() string {
	if x != nil {
		return x.EventFromField
	}
	return ""
}

func (x *Ftrules) GetEventToField() string {
	if x != nil {
		return x.EventToField
	}
	return ""
}

func (x *Ftrules) GetEventValueField() string {
	if x != nil {
		return x.EventValueField
	}
	return ""
}

func (x *Ftrules) GetSkipToAddr() []string {
	if x != nil {
		return x.SkipToAddr
	}
	return nil
}

func (x *Ftrules) GetThresholdBigintBytes() []byte {
	if x != nil {
		return x.ThresholdBigintBytes
	}
	return nil
}

type FtRulesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FtRules map[string]*Ftrules `protobuf:"bytes,1,rep,name=ftRules,proto3" json:"ftRules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FtRulesRes) Reset() {
	*x = FtRulesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risk_v1_risk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtRulesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtRulesRes) ProtoMessage() {}

func (x *FtRulesRes) ProtoReflect() protoreflect.Message {
	mi := &file_risk_v1_risk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtRulesRes.ProtoReflect.Descriptor instead.
func (*FtRulesRes) Descriptor() ([]byte, []int) {
	return file_risk_v1_risk_proto_rawDescGZIP(), []int{2}
}

func (x *FtRulesRes) GetFtRules() map[string]*Ftrules {
	if x != nil {
		return x.FtRules
	}
	return nil
}

// /
type NftRulesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NftRulesReq) Reset() {
	*x = NftRulesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risk_v1_risk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftRulesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftRulesReq) ProtoMessage() {}

func (x *NftRulesReq) ProtoReflect() protoreflect.Message {
	mi := &file_risk_v1_risk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftRulesReq.ProtoReflect.Descriptor instead.
func (*NftRulesReq) Descriptor() ([]byte, []int) {
	return file_risk_v1_risk_proto_rawDescGZIP(), []int{3}
}

type NftRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contract           string   `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	Name               string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MethodName         string   `protobuf:"bytes,3,opt,name=methodName,proto3" json:"methodName,omitempty"`
	MethodSig          string   `protobuf:"bytes,4,opt,name=methodSig,proto3" json:"methodSig,omitempty"`
	MethodFromField    string   `protobuf:"bytes,5,opt,name=methodFromField,proto3" json:"methodFromField,omitempty"`
	MethodToField      string   `protobuf:"bytes,6,opt,name=methodToField,proto3" json:"methodToField,omitempty"`
	MethodTokenIdField string   `protobuf:"bytes,7,opt,name=methodTokenIdField,proto3" json:"methodTokenIdField,omitempty"`
	EventName          string   `protobuf:"bytes,8,opt,name=eventName,proto3" json:"eventName,omitempty"`
	EventSig           string   `protobuf:"bytes,9,opt,name=eventSig,proto3" json:"eventSig,omitempty"`
	EventTopic         string   `protobuf:"bytes,10,opt,name=eventTopic,proto3" json:"eventTopic,omitempty"`
	EventFromField     string   `protobuf:"bytes,11,opt,name=eventFromField,proto3" json:"eventFromField,omitempty"`
	EventToField       string   `protobuf:"bytes,12,opt,name=eventToField,proto3" json:"eventToField,omitempty"`
	EventTokenIdField  string   `protobuf:"bytes,13,opt,name=eventTokenIdField,proto3" json:"eventTokenIdField,omitempty"`
	SkipToAddr         []string `protobuf:"bytes,14,rep,name=skipToAddr,proto3" json:"skipToAddr,omitempty"`
	Threshold          int32    `protobuf:"varint,15,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *NftRules) Reset() {
	*x = NftRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risk_v1_risk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftRules) ProtoMessage() {}

func (x *NftRules) ProtoReflect() protoreflect.Message {
	mi := &file_risk_v1_risk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftRules.ProtoReflect.Descriptor instead.
func (*NftRules) Descriptor() ([]byte, []int) {
	return file_risk_v1_risk_proto_rawDescGZIP(), []int{4}
}

func (x *NftRules) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *NftRules) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NftRules) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *NftRules) GetMethodSig() string {
	if x != nil {
		return x.MethodSig
	}
	return ""
}

func (x *NftRules) GetMethodFromField() string {
	if x != nil {
		return x.MethodFromField
	}
	return ""
}

func (x *NftRules) GetMethodToField() string {
	if x != nil {
		return x.MethodToField
	}
	return ""
}

func (x *NftRules) GetMethodTokenIdField() string {
	if x != nil {
		return x.MethodTokenIdField
	}
	return ""
}

func (x *NftRules) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *NftRules) GetEventSig() string {
	if x != nil {
		return x.EventSig
	}
	return ""
}

func (x *NftRules) GetEventTopic() string {
	if x != nil {
		return x.EventTopic
	}
	return ""
}

func (x *NftRules) GetEventFromField() string {
	if x != nil {
		return x.EventFromField
	}
	return ""
}

func (x *NftRules) GetEventToField() string {
	if x != nil {
		return x.EventToField
	}
	return ""
}

func (x *NftRules) GetEventTokenIdField() string {
	if x != nil {
		return x.EventTokenIdField
	}
	return ""
}

func (x *NftRules) GetSkipToAddr() []string {
	if x != nil {
		return x.SkipToAddr
	}
	return nil
}

func (x *NftRules) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type NftRulesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftRules map[string]*NftRules `protobuf:"bytes,1,rep,name=nftRules,proto3" json:"nftRules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NftRulesRes) Reset() {
	*x = NftRulesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risk_v1_risk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftRulesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftRulesRes) ProtoMessage() {}

func (x *NftRulesRes) ProtoReflect() protoreflect.Message {
	mi := &file_risk_v1_risk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftRulesRes.ProtoReflect.Descriptor instead.
func (*NftRulesRes) Descriptor() ([]byte, []int) {
	return file_risk_v1_risk_proto_rawDescGZIP(), []int{5}
}

func (x *NftRulesRes) GetNftRules() map[string]*NftRules {
	if x != nil {
		return x.NftRules
	}
	return nil
}

type AllAbiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllAbiReq) Reset() {
	*x = AllAbiReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risk_v1_risk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllAbiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllAbiReq) ProtoMessage() {}

func (x *AllAbiReq) ProtoReflect() protoreflect.Message {
	mi := &file_risk_v1_risk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllAbiReq.ProtoReflect.Descriptor instead.
func (*AllAbiReq) Descriptor() ([]byte, []int) {
	return file_risk_v1_risk_proto_rawDescGZIP(), []int{6}
}

type AllAbiRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Abis map[string]string `protobuf:"bytes,1,rep,name=Abis,proto3" json:"Abis,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AllAbiRes) Reset() {
	*x = AllAbiRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risk_v1_risk_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllAbiRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllAbiRes) ProtoMessage() {}

func (x *AllAbiRes) ProtoReflect() protoreflect.Message {
	mi := &file_risk_v1_risk_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllAbiRes.ProtoReflect.Descriptor instead.
func (*AllAbiRes) Descriptor() ([]byte, []int) {
	return file_risk_v1_risk_proto_rawDescGZIP(), []int{7}
}

func (x *AllAbiRes) GetAbis() map[string]string {
	if x != nil {
		return x.Abis
	}
	return nil
}

// //
type RiskTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contract string `protobuf:"bytes,1,opt,name=Contract,proto3" json:"Contract,omitempty"` // v: required
	TxData   string `protobuf:"bytes,2,opt,name=TxData,proto3" json:"TxData,omitempty"`     // v: required
}

func (x *RiskTx) Reset() {
	*x = RiskTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risk_v1_risk_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskTx) ProtoMessage() {}

func (x *RiskTx) ProtoReflect() protoreflect.Message {
	mi := &file_risk_v1_risk_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskTx.ProtoReflect.Descriptor instead.
func (*RiskTx) Descriptor() ([]byte, []int) {
	return file_risk_v1_risk_proto_rawDescGZIP(), []int{8}
}

func (x *RiskTx) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *RiskTx) GetTxData() string {
	if x != nil {
		return x.TxData
	}
	return ""
}

type TxRiskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`   // v: required
	Address string `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"` // v: required
	// //
	SignTxData string `protobuf:"bytes,3,opt,name=SignTxData,proto3" json:"SignTxData,omitempty"` // v: required
}

func (x *TxRiskReq) Reset() {
	*x = TxRiskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risk_v1_risk_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxRiskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxRiskReq) ProtoMessage() {}

func (x *TxRiskReq) ProtoReflect() protoreflect.Message {
	mi := &file_risk_v1_risk_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxRiskReq.ProtoReflect.Descriptor instead.
func (*TxRiskReq) Descriptor() ([]byte, []int) {
	return file_risk_v1_risk_proto_rawDescGZIP(), []int{9}
}

func (x *TxRiskReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TxRiskReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TxRiskReq) GetSignTxData() string {
	if x != nil {
		return x.SignTxData
	}
	return ""
}

type TxRiskRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok         int32    `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Msg        string   `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	RiskSerial string   `protobuf:"bytes,3,opt,name=RiskSerial,proto3" json:"RiskSerial,omitempty"`
	RiskKind   []string `protobuf:"bytes,4,rep,name=RiskKind,proto3" json:"RiskKind,omitempty"`
}

func (x *TxRiskRes) Reset() {
	*x = TxRiskRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risk_v1_risk_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxRiskRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxRiskRes) ProtoMessage() {}

func (x *TxRiskRes) ProtoReflect() protoreflect.Message {
	mi := &file_risk_v1_risk_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxRiskRes.ProtoReflect.Descriptor instead.
func (*TxRiskRes) Descriptor() ([]byte, []int) {
	return file_risk_v1_risk_proto_rawDescGZIP(), []int{10}
}

func (x *TxRiskRes) GetOk() int32 {
	if x != nil {
		return x.Ok
	}
	return 0
}

func (x *TxRiskRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *TxRiskRes) GetRiskSerial() string {
	if x != nil {
		return x.RiskSerial
	}
	return ""
}

func (x *TxRiskRes) GetRiskKind() []string {
	if x != nil {
		return x.RiskKind
	}
	return nil
}

// //
type TFARiskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"` // v: required
	Type   string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`     // v: required
	Mail   string `protobuf:"bytes,3,opt,name=Mail,proto3" json:"Mail,omitempty"`
	Phone  string `protobuf:"bytes,4,opt,name=Phone,proto3" json:"Phone,omitempty"`
}

func (x *TFARiskReq) Reset() {
	*x = TFARiskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risk_v1_risk_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFARiskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFARiskReq) ProtoMessage() {}

func (x *TFARiskReq) ProtoReflect() protoreflect.Message {
	mi := &file_risk_v1_risk_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFARiskReq.ProtoReflect.Descriptor instead.
func (*TFARiskReq) Descriptor() ([]byte, []int) {
	return file_risk_v1_risk_proto_rawDescGZIP(), []int{11}
}

func (x *TFARiskReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TFARiskReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TFARiskReq) GetMail() string {
	if x != nil {
		return x.Mail
	}
	return ""
}

func (x *TFARiskReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type TFARiskRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok         int32  `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Msg        string `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	RiskSerial string `protobuf:"bytes,3,opt,name=RiskSerial,proto3" json:"RiskSerial,omitempty"`
}

func (x *TFARiskRes) Reset() {
	*x = TFARiskRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risk_v1_risk_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFARiskRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFARiskRes) ProtoMessage() {}

func (x *TFARiskRes) ProtoReflect() protoreflect.Message {
	mi := &file_risk_v1_risk_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFARiskRes.ProtoReflect.Descriptor instead.
func (*TFARiskRes) Descriptor() ([]byte, []int) {
	return file_risk_v1_risk_proto_rawDescGZIP(), []int{12}
}

func (x *TFARiskRes) GetOk() int32 {
	if x != nil {
		return x.Ok
	}
	return 0
}

func (x *TFARiskRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *TFARiskRes) GetRiskSerial() string {
	if x != nil {
		return x.RiskSerial
	}
	return ""
}

var File_risk_v1_risk_proto protoreflect.FileDescriptor

var file_risk_v1_risk_proto_rawDesc = []byte{
	0x0a, 0x12, 0x72, 0x69, 0x73, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x0c, 0x0a, 0x0a, 0x46, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x22, 0x99, 0x04, 0x0a, 0x07, 0x46, 0x74, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x46, 0x72, 0x6f, 0x6d,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54,
	0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x54, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x54,
	0x6f, 0x41, 0x64, 0x64, 0x72, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6b, 0x69,
	0x70, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x69, 0x67, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x42, 0x69, 0x67, 0x69, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x90, 0x01,
	0x0a, 0x0a, 0x46, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x07,
	0x66, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x69, 0x73, 0x6b, 0x2e, 0x46, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x2e,
	0x46, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x66, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x49, 0x0a, 0x0c, 0x46, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x46, 0x74,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x0d, 0x0a, 0x0b, 0x4e, 0x66, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x22,
	0x8a, 0x04, 0x0a, 0x08, 0x4e, 0x66, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x6f,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x54, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x2c, 0x0a, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x97, 0x01, 0x0a,
	0x0b, 0x4e, 0x66, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x08,
	0x6e, 0x66, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x4e, 0x66, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x2e, 0x4e, 0x66, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x6e, 0x66, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x4b, 0x0a, 0x0d, 0x4e, 0x66, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x69,
	0x73, 0x6b, 0x2e, 0x4e, 0x66, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x0b, 0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x41, 0x62, 0x69,
	0x52, 0x65, 0x71, 0x22, 0x73, 0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x41, 0x62, 0x69, 0x52, 0x65, 0x73,
	0x12, 0x2d, 0x0a, 0x04, 0x41, 0x62, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x41, 0x6c, 0x6c, 0x41, 0x62, 0x69, 0x52, 0x65, 0x73, 0x2e,
	0x41, 0x62, 0x69, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x41, 0x62, 0x69, 0x73, 0x1a,
	0x37, 0x0a, 0x09, 0x41, 0x62, 0x69, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3c, 0x0a, 0x06, 0x52, 0x69, 0x73, 0x6b,
	0x54, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5d, 0x0a, 0x09, 0x54, 0x78, 0x52, 0x69, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x78, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x54,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x22, 0x69, 0x0a, 0x09, 0x54, 0x78, 0x52, 0x69, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x4f, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x4b, 0x69, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x4b, 0x69, 0x6e, 0x64,
	0x22, 0x62, 0x0a, 0x0a, 0x54, 0x46, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61,
	0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x22, 0x4e, 0x0a, 0x0a, 0x54, 0x46, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x4f, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x32, 0xcc, 0x02, 0x0a, 0x04, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x3c, 0x0a,
	0x08, 0x52, 0x70, 0x63, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0a, 0x52,
	0x70, 0x63, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x78, 0x73, 0x12, 0x0f, 0x2e, 0x72, 0x69, 0x73, 0x6b,
	0x2e, 0x54, 0x78, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x72, 0x69, 0x73,
	0x6b, 0x2e, 0x54, 0x78, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x32, 0x0a,
	0x0a, 0x52, 0x70, 0x63, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x46, 0x41, 0x12, 0x10, 0x2e, 0x72, 0x69,
	0x73, 0x6b, 0x2e, 0x54, 0x46, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e,
	0x72, 0x69, 0x73, 0x6b, 0x2e, 0x54, 0x46, 0x41, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x2f, 0x0a, 0x09, 0x52, 0x70, 0x63, 0x41, 0x6c, 0x6c, 0x41, 0x62, 0x69, 0x12, 0x0f,
	0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x41, 0x6c, 0x6c, 0x41, 0x62, 0x69, 0x52, 0x65, 0x71, 0x1a,
	0x0f, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x41, 0x6c, 0x6c, 0x41, 0x62, 0x69, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x38, 0x0a, 0x0e, 0x52, 0x70, 0x63, 0x41, 0x6c, 0x6c, 0x4e, 0x66, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x11, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x4e, 0x66, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x4e,
	0x66, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0d,
	0x52, 0x70, 0x63, 0x41, 0x6c, 0x6c, 0x46, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x10, 0x2e,
	0x72, 0x69, 0x73, 0x6b, 0x2e, 0x46, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x10, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x46, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x42, 0x0f, 0x5a, 0x0d, 0x2f, 0x72, 0x69, 0x73, 0x6b, 0x2f, 0x6e, 0x72, 0x70,
	0x63, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_risk_v1_risk_proto_rawDescOnce sync.Once
	file_risk_v1_risk_proto_rawDescData = file_risk_v1_risk_proto_rawDesc
)

func file_risk_v1_risk_proto_rawDescGZIP() []byte {
	file_risk_v1_risk_proto_rawDescOnce.Do(func() {
		file_risk_v1_risk_proto_rawDescData = protoimpl.X.CompressGZIP(file_risk_v1_risk_proto_rawDescData)
	})
	return file_risk_v1_risk_proto_rawDescData
}

var file_risk_v1_risk_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_risk_v1_risk_proto_goTypes = []interface{}{
	(*FtRulesReq)(nil),  // 0: risk.FtRulesReq
	(*Ftrules)(nil),     // 1: risk.Ftrules
	(*FtRulesRes)(nil),  // 2: risk.FtRulesRes
	(*NftRulesReq)(nil), // 3: risk.NftRulesReq
	(*NftRules)(nil),    // 4: risk.NftRules
	(*NftRulesRes)(nil), // 5: risk.NftRulesRes
	(*AllAbiReq)(nil),   // 6: risk.AllAbiReq
	(*AllAbiRes)(nil),   // 7: risk.AllAbiRes
	(*RiskTx)(nil),      // 8: risk.RiskTx
	(*TxRiskReq)(nil),   // 9: risk.TxRiskReq
	(*TxRiskRes)(nil),   // 10: risk.TxRiskRes
	(*TFARiskReq)(nil),  // 11: risk.TFARiskReq
	(*TFARiskRes)(nil),  // 12: risk.TFARiskRes
	nil,                 // 13: risk.FtRulesRes.FtRulesEntry
	nil,                 // 14: risk.NftRulesRes.NftRulesEntry
	nil,                 // 15: risk.AllAbiRes.AbisEntry
	(*empty.Empty)(nil), // 16: google.protobuf.Empty
}
var file_risk_v1_risk_proto_depIdxs = []int32{
	13, // 0: risk.FtRulesRes.ftRules:type_name -> risk.FtRulesRes.FtRulesEntry
	14, // 1: risk.NftRulesRes.nftRules:type_name -> risk.NftRulesRes.NftRulesEntry
	15, // 2: risk.AllAbiRes.Abis:type_name -> risk.AllAbiRes.AbisEntry
	1,  // 3: risk.FtRulesRes.FtRulesEntry.value:type_name -> risk.Ftrules
	4,  // 4: risk.NftRulesRes.NftRulesEntry.value:type_name -> risk.NftRules
	16, // 5: risk.Risk.RpcAlive:input_type -> google.protobuf.Empty
	9,  // 6: risk.Risk.RpcRiskTxs:input_type -> risk.TxRiskReq
	11, // 7: risk.Risk.RpcRiskTFA:input_type -> risk.TFARiskReq
	6,  // 8: risk.Risk.RpcAllAbi:input_type -> risk.AllAbiReq
	3,  // 9: risk.Risk.RpcAllNftRules:input_type -> risk.NftRulesReq
	0,  // 10: risk.Risk.RpcAllFtRules:input_type -> risk.FtRulesReq
	16, // 11: risk.Risk.RpcAlive:output_type -> google.protobuf.Empty
	10, // 12: risk.Risk.RpcRiskTxs:output_type -> risk.TxRiskRes
	12, // 13: risk.Risk.RpcRiskTFA:output_type -> risk.TFARiskRes
	7,  // 14: risk.Risk.RpcAllAbi:output_type -> risk.AllAbiRes
	5,  // 15: risk.Risk.RpcAllNftRules:output_type -> risk.NftRulesRes
	2,  // 16: risk.Risk.RpcAllFtRules:output_type -> risk.FtRulesRes
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_risk_v1_risk_proto_init() }
func file_risk_v1_risk_proto_init() {
	if File_risk_v1_risk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_risk_v1_risk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FtRulesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risk_v1_risk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ftrules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risk_v1_risk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FtRulesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risk_v1_risk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftRulesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risk_v1_risk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risk_v1_risk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftRulesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risk_v1_risk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllAbiReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risk_v1_risk_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllAbiRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risk_v1_risk_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risk_v1_risk_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxRiskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risk_v1_risk_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxRiskRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risk_v1_risk_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFARiskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risk_v1_risk_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFARiskRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_risk_v1_risk_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_risk_v1_risk_proto_goTypes,
		DependencyIndexes: file_risk_v1_risk_proto_depIdxs,
		MessageInfos:      file_risk_v1_risk_proto_msgTypes,
	}.Build()
	File_risk_v1_risk_proto = out.File
	file_risk_v1_risk_proto_rawDesc = nil
	file_risk_v1_risk_proto_goTypes = nil
	file_risk_v1_risk_proto_depIdxs = nil
}
