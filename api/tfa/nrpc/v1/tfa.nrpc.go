// This code was autogenerated from tfa/v1/tfa.proto, do not edit.
package v1

import (
	"context"
	"log"
	"time"

	"google.golang.org/protobuf/proto"
	"github.com/nats-io/nats.go"
	github_com_golang_protobuf_ptypes_empty "github.com/golang/protobuf/ptypes/empty"
	"github.com/nats-rpc/nrpc"
)

// TFAServer is the interface that providers of the service
// TFA should implement.
type TFAServer interface {
	RpcAlive(ctx context.Context, req *github_com_golang_protobuf_ptypes_empty.Empty) (*github_com_golang_protobuf_ptypes_empty.Empty, error)
	RpcTfaInfo(ctx context.Context, req *TFAReq) (*TFARes, error)
	RpcTfaTx(ctx context.Context, req *TfaTxReq) (*TfaTxRes, error)
	RpcSendSmsCode(ctx context.Context, req *SmsCodeReq) (*SmsCodeRes, error)
	RpcSendMailCode(ctx context.Context, req *MailCodekReq) (*MailCodekRes, error)
	RpcSendVerifyCode(ctx context.Context, req *VerifyCodekReq) (*VerifyCodeRes, error)
}

// TFAHandler provides a NATS subscription handler that can serve a
// subscription using a given TFAServer implementation.
type TFAHandler struct {
	ctx     context.Context
	workers *nrpc.WorkerPool
	nc      nrpc.NatsConn
	server  TFAServer

	encodings []string
}

func NewTFAHandler(ctx context.Context, nc nrpc.NatsConn, s TFAServer) *TFAHandler {
	return &TFAHandler{
		ctx:    ctx,
		nc:     nc,
		server: s,

		encodings: []string{"protobuf"},
	}
}

func NewTFAConcurrentHandler(workers *nrpc.WorkerPool, nc nrpc.NatsConn, s TFAServer) *TFAHandler {
	return &TFAHandler{
		workers: workers,
		nc:      nc,
		server:  s,
	}
}

// SetEncodings sets the output encodings when using a '*Publish' function
func (h *TFAHandler) SetEncodings(encodings []string) {
	h.encodings = encodings
}

func (h *TFAHandler) Subject() string {
	return "TFA.>"
}

func (h *TFAHandler) Handler(msg *nats.Msg) {
	var ctx context.Context
	if h.workers != nil {
		ctx = h.workers.Context
	} else {
		ctx = h.ctx
	}
	request := nrpc.NewRequest(ctx, h.nc, msg.Subject, msg.Reply)
	// extract method name & encoding from subject
	_, _, name, tail, err := nrpc.ParseSubject(
		"", 0, "TFA", 0, msg.Subject)
	if err != nil {
		log.Printf("TFAHanlder: TFA subject parsing failed: %v", err)
		return
	}

	request.MethodName = name
	request.SubjectTail = tail

	// call handler and form response
	var immediateError *nrpc.Error
	switch name {
	case "RpcAlive":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RpcAliveHanlder: RpcAlive subject parsing failed: %v", err)
			break
		}
		var req github_com_golang_protobuf_ptypes_empty.Empty
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RpcAliveHandler: RpcAlive request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RpcAlive(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "RpcTfaInfo":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RpcTfaInfoHanlder: RpcTfaInfo subject parsing failed: %v", err)
			break
		}
		var req TFAReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RpcTfaInfoHandler: RpcTfaInfo request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RpcTfaInfo(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "RpcTfaTx":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RpcTfaTxHanlder: RpcTfaTx subject parsing failed: %v", err)
			break
		}
		var req TfaTxReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RpcTfaTxHandler: RpcTfaTx request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RpcTfaTx(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "RpcSendSmsCode":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RpcSendSmsCodeHanlder: RpcSendSmsCode subject parsing failed: %v", err)
			break
		}
		var req SmsCodeReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RpcSendSmsCodeHandler: RpcSendSmsCode request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RpcSendSmsCode(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "RpcSendMailCode":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RpcSendMailCodeHanlder: RpcSendMailCode subject parsing failed: %v", err)
			break
		}
		var req MailCodekReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RpcSendMailCodeHandler: RpcSendMailCode request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RpcSendMailCode(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	case "RpcSendVerifyCode":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("RpcSendVerifyCodeHanlder: RpcSendVerifyCode subject parsing failed: %v", err)
			break
		}
		var req VerifyCodekReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("RpcSendVerifyCodeHandler: RpcSendVerifyCode request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.RpcSendVerifyCode(ctx, &req)
				if err != nil {
					return nil, err
				}
				return innerResp, err
			}
		}
	default:
		log.Printf("TFAHandler: unknown name %q", name)
		immediateError = &nrpc.Error{
			Type: nrpc.Error_CLIENT,
			Message: "unknown name: " + name,
		}
	}
	if immediateError == nil {
		if h.workers != nil {
			// Try queuing the request
			if err := h.workers.QueueRequest(request); err != nil {
				log.Printf("nrpc: Error queuing the request: %s", err)
			}
		} else {
			// Run the handler synchronously
			request.RunAndReply()
		}
	}

	if immediateError != nil {
		if err := request.SendReply(nil, immediateError); err != nil {
			log.Printf("TFAHandler: TFA handler failed to publish the response: %s", err)
		}
	} else {
	}
}

type TFAClient struct {
	nc      nrpc.NatsConn
	Subject string
	Encoding string
	Timeout time.Duration
}

func NewTFAClient(nc nrpc.NatsConn) *TFAClient {
	return &TFAClient{
		nc:      nc,
		Subject: "TFA",
		Encoding: "protobuf",
		Timeout: 5 * time.Second,
	}
}

func (c *TFAClient) RpcAlive(req *github_com_golang_protobuf_ptypes_empty.Empty) (*github_com_golang_protobuf_ptypes_empty.Empty, error) {

	subject := c.Subject + "." + "RpcAlive"

	// call
	var resp = github_com_golang_protobuf_ptypes_empty.Empty{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *TFAClient) RpcTfaInfo(req *TFAReq) (*TFARes, error) {

	subject := c.Subject + "." + "RpcTfaInfo"

	// call
	var resp = TFARes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *TFAClient) RpcTfaTx(req *TfaTxReq) (*TfaTxRes, error) {

	subject := c.Subject + "." + "RpcTfaTx"

	// call
	var resp = TfaTxRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *TFAClient) RpcSendSmsCode(req *SmsCodeReq) (*SmsCodeRes, error) {

	subject := c.Subject + "." + "RpcSendSmsCode"

	// call
	var resp = SmsCodeRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *TFAClient) RpcSendMailCode(req *MailCodekReq) (*MailCodekRes, error) {

	subject := c.Subject + "." + "RpcSendMailCode"

	// call
	var resp = MailCodekRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

func (c *TFAClient) RpcSendVerifyCode(req *VerifyCodekReq) (*VerifyCodeRes, error) {

	subject := c.Subject + "." + "RpcSendVerifyCode"

	// call
	var resp = VerifyCodeRes{}
	if err := nrpc.Call(req, &resp, c.nc, subject, c.Encoding, c.Timeout); err != nil {
		return nil, err
	}

	return &resp, nil
}

type Client struct {
	nc      nrpc.NatsConn
	defaultEncoding string
	defaultTimeout time.Duration
	TFA *TFAClient
}

func NewClient(nc nrpc.NatsConn) *Client {
	c := Client{
		nc: nc,
		defaultEncoding: "protobuf",
		defaultTimeout: 5*time.Second,
	}
	c.TFA = NewTFAClient(nc)
	return &c
}

func (c *Client) SetEncoding(encoding string) {
	c.defaultEncoding = encoding
	if c.TFA != nil {
		c.TFA.Encoding = encoding
	}
}

func (c *Client) SetTimeout(t time.Duration) {
	c.defaultTimeout = t
	if c.TFA != nil {
		c.TFA.Timeout = t
	}
}